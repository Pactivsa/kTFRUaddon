/*
 * This class was created by <kuzuanpa>. It is distributed as
 * part of the kTFRUAddon Mod. Get the Source Code in github:
 * https://github.com/kuzuanpa/kTFRUAddon
 *
 * kTFRUAddon is Open Source and distributed under the
 * LGPLv3 License: https://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */

/*
 * This class was created by <kuzuanpa>. It is distributed as
 * part of the kTFRUAddon Mod. Get the Source Code in github:
 * https://github.com/kuzuanpa/kTFRUAddon
 *
 * kTFRUAddon is Open Source and distributed under the
 * LGPLv3 License: https://www.gnu.org/licenses/lgpl-3.0.txt
 *
 */
package cn.kuzuanpa.ktfruaddon.tile;

import cn.kuzuanpa.ktfruaddon.item.util.ItemList;
import cn.kuzuanpa.ktfruaddon.ktfruaddon;
import cn.kuzuanpa.ktfruaddon.material.matList;
import cn.kuzuanpa.ktfruaddon.recipe.recipeMaps;
import cn.kuzuanpa.ktfruaddon.tile.accelerator.exampleMachine;
import cn.kuzuanpa.ktfruaddon.tile.casing.rustBronzeCasing;
import cn.kuzuanpa.ktfruaddon.tile.energy.generator.FuelBattery;
import cn.kuzuanpa.ktfruaddon.tile.energy.generator.ManualGenerator;
import cn.kuzuanpa.ktfruaddon.tile.machine.CrucibleModel;
import cn.kuzuanpa.ktfruaddon.tile.machine.FlawDetector;
import cn.kuzuanpa.ktfruaddon.tile.machine.MachineCodeUtil;
import cn.kuzuanpa.ktfruaddon.tile.machine.tankGasCompressedInputer;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.*;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.generator.MultiTileEntityLargeTurbineGas;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.generator.MultiTileEntityLargeTurbineSteam;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.generator.SunHeater;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.model.CNCMachine3;
import cn.kuzuanpa.ktfruaddon.tile.multiblock.parts.*;
import cn.kuzuanpa.ktfruaddon.tile.space.dysonSphere.dysonSphereMonitor;
import cn.kuzuanpa.ktfruaddon.tile.util.kTileNBT;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import gregapi.block.multitileentity.MultiTileEntityBlock;
import gregapi.block.multitileentity.MultiTileEntityRegistry;
import gregapi.data.*;
import gregapi.oredict.OreDictItemData;
import gregapi.oredict.OreDictManager;
import gregapi.oredict.OreDictMaterial;
import gregapi.tileentity.connectors.MultiTileEntityPipeFluid;
import gregapi.tileentity.connectors.MultiTileEntityPipeItem;
import gregapi.tileentity.machines.MultiTileEntityBasicMachine;
import gregapi.tileentity.machines.MultiTileEntityBasicMachineElectric;
import gregapi.tileentity.multiblocks.MultiTileEntityMultiBlockPart;
import gregapi.util.CR;
import gregapi.util.ST;
import gregapi.util.UT;
import gregtech.tileentity.energy.generators.MultiTileEntityGasMotor;
import gregtech.tileentity.energy.generators.MultiTileEntityMotorLiquid;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodBreeder;
import gregtech.tileentity.energy.reactors.MultiTileEntityReactorRodProduct;

import static cn.kuzuanpa.ktfruaddon.ktfruaddon.MOD_ID;
import static gregapi.data.CS.*;
import static gregapi.util.CR.DEF;

public class tileEntityInit0 {
    public static void init(FMLInitializationEvent aEvent) {
        // Take the Machine Block from the Set, that you initialised above in @PreInit.
        MultiTileEntityBlock aMachine = MultiTileEntityBlock.getOrCreate(MOD_ID, "machine", gregapi.block.MaterialMachines.instance, net.minecraft.block.Block.soundTypeMetal, gregapi.data.CS.TOOL_wrench, 0, 0, 15, false, false);
        MultiTileEntityRegistry kRegistry0 = ktfruaddon.kTileRegistry0;
        MultiTileEntityRegistry gRegistry = MultiTileEntityRegistry.getRegistry("gt.multitileentity");
        MultiTileEntityBlock tWireBlock = MultiTileEntityBlock.getOrCreate(MOD_ID, "machine", gregapi.block.MaterialMachines.instance, net.minecraft.block.Block.soundTypeMetal, gregapi.data.CS.TOOL_cutter, 0, 0, 15, F, F);
        MultiTileEntityBlock tMetalBlock = MultiTileEntityBlock.getOrCreate(MOD_ID, "iron", net.minecraft.block.material.Material.iron, net.minecraft.block.Block.soundTypeMetal, gregapi.data.CS.TOOL_pickaxe, 0, 0, 15, F, F);
        OreDictMaterial aMat; Class<? extends net.minecraft.tileentity.TileEntity> aClass;

        int i;



        // Makes an Examplium Chest out of your Example Material.
        // Note: the Crafting Recipe only works in conjunction with GT since you don't have the Stick, Ring and Plate PrefixItems.
        //kRegistry0.add(tExamplium.getLocal() + " Chest", "Chests", 0, 0, gregapi.block.multitileentity.example.MultiTileEntityChest.class, 0, 16, tMetalBlock, gregapi.util.UT.NBT.make(gregapi.data.CS.NBT_MATERIAL, tExamplium, gregapi.data.CS.NBT_INV_SIZE, 54, gregapi.data.CS.NBT_TEXTURE, "metalchest", gregapi.data.CS.NBT_HARDNESS, 6.0F, gregapi.data.CS.NBT_RESISTANCE, 6.0F, gregapi.data.CS.NBT_COLOR, gregapi.util.UT.Code.getRGBInt(tExamplium.fRGBaSolid)), "sPw", "RSR", "PPP", 'P', gregapi.data.OP.plate.dat(tExamplium), 'R', gregapi.data.OP.ring.dat(tExamplium), 'S', gregapi.data.OP.stick.dat(tExamplium));
        // The above just makes a vanilla Furnace that is made of Examplium, you cannot obtain the Examplium right now. For that you will need your own Recipe Handler.
        //Recipe.RecipeMap kTestRecipes = new Recipe.RecipeMap(null, "example.recipe.exampliumfurnace", "Examplium Furnace", null, 0, 1, MOD_ID + ":textures/gui/machines/ExampliumFurnace",/*IN-OUT-MIN-ITEM=*/ 1, 1, 1,/*IN-OUT-MIN-FLUID=*/ 0, 0, 0,/*MIN*/ 0,/*AMP=*/ 1, "", 1, "", true, true, true, true, false, true, true);
        // This Recipe will turn an Iron Ingot into an Examplium Ingot at 64 Units per Tick for 128 Ticks.
        //kTestRecipes.addRecipe1(true, 64, 128, gregapi.util.OM.ingot(gregapi.data.MT.Fe), gregapi.util.OM.ingot(tExamplium));
        // This Recipe will turn a Wrought Iron Ingot into an Examplium Ingot at 64 Units per Tick for 96 Ticks. So a slightly cheaper variant
        //kTestRecipes.addRecipe1(true, 64, 96, gregapi.util.OM.ingot(gregapi.data.MT.WroughtIron), gregapi.util.OM.ingot(tExamplium));
        // This Recipe will turn a Steel Ingot into an Examplium Ingot at 64 Units per Tick for 64 Ticks. So a cheaper variant
        //kTestRecipes.addRecipe1(true, 64, 64, gregapi.util.OM.ingot(gregapi.data.MT.Steel), gregapi.util.OM.ingot(tExamplium));

        // Makes an Examplium Furnace out of Iron.
        // Note: the Crafting Recipe only works in conjunction with GT since you don't have all the PrefixItems.
        // GUI has to be at: "/assets/insert_your_MOD_ID_here/textures/gui/machines/Oven.png"
        // Block Textures have to be at: "/assets/gregtech/textures/blocks/machines/basicmachines/exampliumfurnace/..." Yes that is not a Typo, it is actually the GregTech Mod-ID in that path. I noticed that flaw way too late to fix it. And look at how GT has the Textures for its Oven for Details.
        //tExampleRegistry.add("Examplium Furnace", "Example Mod", 2, 0, gregapi.tileentity.machines.MultiTileEntityBasicMachine.class, gregapi.data.MT.Fe.mToolQuality, 16, tMachineBlock, gregapi.util.UT.NBT.make(gregapi.data.CS.NBT_MATERIAL, gregapi.data.MT.Fe, gregapi.data.CS.NBT_HARDNESS, 6.0F, gregapi.data.CS.NBT_RESISTANCE, 6.0F, gregapi.data.CS.NBT_COLOR, gregapi.util.UT.Code.getRGBInt(gregapi.data.MT.Fe.fRGBaSolid), gregapi.data.CS.NBT_INPUT, 128, gregapi.data.CS.NBT_TEXTURE, "exampliumfurnace", gregapi.data.CS.NBT_GUI, MOD_ID + ":textures/gui/machines/ExampliumFurnace", gregapi.data.CS.NBT_ENERGY_ACCEPTED, gregapi.data.TD.Energy.HU, gregapi.data.CS.NBT_RECIPEMAP, kTestRecipes, gregapi.data.CS.NBT_EFFICIENCY, 10000, gregapi.data.CS.NBT_INV_SIDE_IN, gregapi.data.CS.SBIT_L, gregapi.data.CS.NBT_INV_SIDE_AUTO_IN, gregapi.data.CS.SIDE_LEFT, gregapi.data.CS.NBT_INV_SIDE_OUT, gregapi.data.CS.SBIT_R, gregapi.data.CS.NBT_INV_SIDE_AUTO_OUT, gregapi.data.CS.SIDE_RIGHT, gregapi.data.CS.NBT_ENERGY_ACCEPTED_SIDES, gregapi.data.CS.SBIT_D), "wMh", "BCB", 'M', gregapi.data.OP.casingMachineDouble.dat(gregapi.data.MT.Fe), 'B', gregapi.util.ST.make(net.minecraft.init.Blocks.brick_block, 1, gregapi.data.CS.W), 'C', gregapi.data.OP.plateDouble.dat(gregapi.data.ANY.Cu));

        // Makes an electric Examplium Furnace out of Steel.
        // Note: the Crafting Recipe only works in conjunction with GT since you don't have all the PrefixItems.
        //tExampleRegistry.add("Electric Examplium Furnace", "Example Mod", 3, 0, gregapi.tileentity.machines.MultiTileEntityBasicMachineElectric.class, gregapi.data.MT.Steel.mToolQuality, 16, tMachineBlock, gregapi.util.UT.NBT.make(gregapi.data.CS.NBT_MATERIAL, gregapi.data.MT.Steel, gregapi.data.CS.NBT_HARDNESS, 6.0F, gregapi.data.CS.NBT_RESISTANCE, 6.0F, gregapi.data.CS.NBT_COLOR, gregapi.util.UT.Code.getRGBInt(gregapi.data.MT.Steel.fRGBaSolid), gregapi.data.CS.NBT_INPUT, 128, gregapi.data.CS.NBT_TEXTURE, "exampliumfurnace", gregapi.data.CS.NBT_GUI, MOD_ID + ":textures/gui/machines/ExampliumFurnace", gregapi.data.CS.NBT_ENERGY_ACCEPTED, gregapi.data.TD.Energy.EU, gregapi.data.CS.NBT_RECIPEMAP, kTestRecipes, gregapi.data.CS.NBT_EFFICIENCY, 10000, gregapi.data.CS.NBT_INV_SIDE_IN, gregapi.data.CS.SBIT_L, gregapi.data.CS.NBT_INV_SIDE_AUTO_IN, gregapi.data.CS.SIDE_LEFT, gregapi.data.CS.NBT_INV_SIDE_OUT, gregapi.data.CS.SBIT_R, gregapi.data.CS.NBT_INV_SIDE_AUTO_OUT, gregapi.data.CS.SIDE_RIGHT, gregapi.data.CS.NBT_ENERGY_ACCEPTED_SIDES, gregapi.data.CS.SBIT_D), "wMh", "BCB", 'M', gregapi.data.OP.casingMachineDouble.dat(gregapi.data.MT.Steel), 'B', gregapi.util.ST.make(net.minecraft.init.Blocks.brick_block, 1, gregapi.data.CS.W), 'C', gregapi.data.MT.DATA.CIRCUITS[1]);

        // Makes a Flux Examplium Furnace out of Invar.
        // Note: the Crafting Recipe only works in conjunction with GT since you don't have all the PrefixItems.
        // Note: Since it takes RF, the Input has to be 4 times larger.
        //tExampleRegistry.add("Flux Examplium Furnace", "Example Mod", 4, 0, gregapi.tileentity.machines.MultiTileEntityBasicMachineFlux.class, gregapi.data.MT.Invar.mToolQuality, 16, tMachineBlock, gregapi.util.UT.NBT.make(gregapi.data.CS.NBT_MATERIAL, gregapi.data.MT.Invar, gregapi.data.CS.NBT_HARDNESS, 6.0F, gregapi.data.CS.NBT_RESISTANCE, 6.0F, gregapi.data.CS.NBT_COLOR, gregapi.util.UT.Code.getRGBInt(gregapi.data.MT.Invar.fRGBaSolid), gregapi.data.CS.NBT_INPUT, 512, gregapi.data.CS.NBT_TEXTURE, "exampliumfurnace", gregapi.data.CS.NBT_GUI, MOD_ID + ":textures/gui/machines/ExampliumFurnace", gregapi.data.CS.NBT_ENERGY_ACCEPTED, gregapi.data.TD.Energy.RF, gregapi.data.CS.NBT_RECIPEMAP, kTestRecipes, gregapi.data.CS.NBT_EFFICIENCY, 10000, gregapi.data.CS.NBT_INV_SIDE_IN, gregapi.data.CS.SBIT_L, gregapi.data.CS.NBT_INV_SIDE_AUTO_IN, gregapi.data.CS.SIDE_LEFT, gregapi.data.CS.NBT_INV_SIDE_OUT, gregapi.data.CS.SBIT_R, gregapi.data.CS.NBT_INV_SIDE_AUTO_OUT, gregapi.data.CS.SIDE_RIGHT, gregapi.data.CS.NBT_ENERGY_ACCEPTED_SIDES, gregapi.data.CS.SBIT_D), "wMh", "BCB", 'M', gregapi.data.OP.casingMachineDouble.dat(gregapi.data.MT.Invar), 'B', gregapi.util.ST.make(net.minecraft.init.Blocks.brick_block, 1, gregapi.data.CS.W), 'C', gregapi.data.MT.DATA.CIRCUITS[3]);

        // Makes a vanilla Furnace out of your Example Material.
        // Note: the Crafting Recipe only works in conjunction with GT since you don't have all the PrefixItems.
        // GUI has to be at: "/assets/insert_your_MOD_ID_here/textures/gui/machines/Oven.png"
        // Block Textures have to be at: "/assets/gregtech/textures/blocks/machines/basicmachines/oven/..." Yes that is not a Typo, it is actually the GregTech Mod-ID in that path. I noticed that flaw way too late to fix it. And look at how GT has the Textures for its Oven for Details.
        //kRegistry0.add("Oven (" + tExamplium.getLocal() + ")", "Example Mod", 1, 0, gregapi.tileentity.machines.MultiTileEntityBasicMachine.class, tExamplium.mToolQuality, 16, tMachineBlock, gregapi.util.UT.NBT.make(gregapi.data.CS.NBT_MATERIAL, tExamplium, gregapi.data.CS.NBT_HARDNESS, 6.0F, gregapi.data.CS.NBT_RESISTANCE, 6.0F, gregapi.data.CS.NBT_COLOR, gregapi.util.UT.Code.getRGBInt(tExamplium.fRGBaSolid), gregapi.data.CS.NBT_INPUT, 128, gregapi.data.CS.NBT_TEXTURE, "oven", gregapi.data.CS.NBT_GUI, MOD_ID + ":textures/gui/machines/Oven", gregapi.data.CS.NBT_ENERGY_ACCEPTED, gregapi.data.TD.Energy.HU, gregapi.data.CS.NBT_RECIPEMAP, gregapi.data.RM.Furnace, gregapi.data.CS.NBT_EFFICIENCY, 10000, gregapi.data.CS.NBT_INV_SIDE_IN, gregapi.data.CS.SBIT_L, gregapi.data.CS.NBT_INV_SIDE_AUTO_IN, gregapi.data.CS.SIDE_LEFT, gregapi.data.CS.NBT_INV_SIDE_OUT, gregapi.data.CS.SBIT_R, gregapi.data.CS.NBT_INV_SIDE_AUTO_OUT, gregapi.data.CS.SIDE_RIGHT, gregapi.data.CS.NBT_ENERGY_ACCEPTED_SIDES, gregapi.data.CS.SBIT_D), "wMh", "BCB", 'M', gregapi.data.OP.casingMachine.dat(tExamplium), 'B', gregapi.util.ST.make(net.minecraft.init.Blocks.brick_block, 1, gregapi.data.CS.W), 'C', gregapi.data.OP.plateDouble.dat(gregapi.data.ANY.Cu));
        MultiTileEntityPipeFluid.addFluidPipes(0, 26142, 800, true, true, false, true, false, false, true, false,kRegistry0, aMachine, gregapi.tileentity.connectors.MultiTileEntityPipeFluid.class, (long) (MT.Teflon.mMeltingPoint * 1.25), MT.Teflon);
        MultiTileEntityPipeItem.addItemPipes(26, 25202, 8192, 4, true, false,kRegistry0, aMachine, gregapi.tileentity.connectors.MultiTileEntityPipeItem.class,  MT.PVC);
        //gregapi.tileentity.connectors.MultiTileEntityWireElectric.addElectricWires(50, 0, gregapi.data.CS.VMAX[4], 1, 0, 0, true, false, true, kRegistry0, tWireBlock, gregapi.tileentity.connectors.MultiTileEntityWireElectric.class, tExamplium);


        aMat = MT.Co;                   kRegistry0.add("Co-60 Breeder Rod"                               , "ktfruaddon: Energy",  9980,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,   6400000L, NBT_NUCLEAR_LOSS,  1000, NBT_VALUE, 9990)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), kRegistry0.getItem());
        //aMat = MT.U_238;                kRegistry0.add("Uranium-238 Breeder Rod"                                 , "ktfruaddon: Energy",  9981,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,  256000000L, NBT_NUCLEAR_LOSS,  2500, NBT_VALUE, 9991)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), kRegistry0.getItem());
        //aMat = MT.Li;                   kRegistry0.add("Lithium Breeder Rod"                                     , "ktfruaddon: Energy",  9982,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY,     640000L, NBT_NUCLEAR_LOSS,   250, NBT_VALUE, 9992)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), kRegistry0.getItem());
        //aMat = MT.Nq;                   kRegistry0.add("Naquadah Breeder Rod"                                    , "ktfruaddon: Energy",  9983,  9200, MultiTileEntityReactorRodBreeder.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_MAXDURABILITY, 4096000000L, NBT_NUCLEAR_LOSS, 10000, NBT_VALUE, 9993)); RM.Canner.addRecipe2(F, 16, 16, OP.bolt.mat(aMat, 4), IL.Reactor_Rod_Empty.get(1), kRegistry0.getItem());
        //
        aMat = MT.Co_60;                kRegistry0.add("Co-60 Enriched Rod"                              , "ktfruaddon: Energy",  9990,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9980)); RM.Centrifuge.addRecipe1(F,  64, 256, kRegistry0.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 4), OP.dustDiv72.mat(MT.Co, 4));
        //aMat = MT.Pu_239;               kRegistry0.add("Plutonium-239 Enriched Rod"                              , "ktfruaddon: Energy",  9992,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9981)); RM.Centrifuge.addRecipe1(F,  64, 256, kRegistry0.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 4), OP.dustDiv72.mat(MT.U_238, 4));
        //aMat = MT.T;                    kRegistry0.add("Tritium Enriched Rod"                                    , "ktfruaddon: Energy",  9993,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9982)); RM.Canner    .addRecipe1(F,  16,  16, kRegistry0.getItem(), new FluidStack[] {}, FL.amount(aMat.mGas, 500L), IL.Reactor_Rod_Empty.get(1));
        //aMat = MT.Nq_528;               kRegistry0.add("Enriched Naquadah Enriched Rod"                          , "ktfruaddon: Energy",  9994,  9200, MultiTileEntityReactorRodProduct.class  , aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  10.0F, NBT_RESISTANCE,  10.0F, NBT_VALUE, 9983)); RM.Centrifuge.addRecipe1(F, 512, 256, kRegistry0.getItem(), ZL_FS, ZL_FS, OP.scrapGt.mat(MT.Zr, 9), OP.dustTiny.mat(aMat, 4), OP.dustDiv72.mat(MT.Nq, 4));

        //10000-19999,Single Block Generators
        i=10000;
        //Small Gas Turbine
        aClass = MultiTileEntityGasMotor.class;
        aMat = MT.Bronze;               kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,   16, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        aMat = ANY.Steel;               kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,   32, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        aMat = MT.Invar;                kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,   64, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        aMat = MT.Ti;                   kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,  128, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        aMat = MT.TungstenSteel;        kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,  256, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        aMat = MT.Ir;                   kRegistry0.add("Small Gas Turbine (" + aMat.getLocal() + ")"             , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Gas, NBT_EFFICIENCY, 3500, NBT_OUTPUT,  512, NBT_ENERGY_EMITTED, TD.Energy.RU), "PLP", "SMS", "GOC", 'M', OP.casingMachineDouble.dat(aMat), 'O', OP.pipeQuadruple.dat(aMat), 'P', OP.plateTriple.dat(aMat), 'S', OP.rotor.dat(aMat), 'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant);
        i=10100;
        //Small Diesel Engine
        aClass = MultiTileEntityMotorLiquid.class;
        aMat = MT.Bronze;               kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,   16, NBT_ENERGY_EMITTED, TD.Energy.RU), "Y L", "RwM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26122), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual1,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual1);
        aMat = MT.ArsenicCopper;        kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,   16, NBT_ENERGY_EMITTED, TD.Energy.RU), "Y L", "RwM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(25352), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual2,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual2);
        aMat = MT.ArsenicBronze;        kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,   24, NBT_ENERGY_EMITTED, TD.Energy.RU), "Y L", "RwM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(25377), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual3,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual3);
        aMat = ANY.Steel;               kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,   32, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYL", "RwM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26142), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual4,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual4);
        aMat = MT.Invar;                kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,   64, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYL", "RwM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26402), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual5,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual5);
        aMat = MT.Ti;                   kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,  128, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYL", "RwM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26182), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual6,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinderManual6);
        aMat = MT.TungstenSteel;        kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,  256, NBT_ENERGY_EMITTED, TD.Energy.RU), "YYL", "RwM", "YYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26222), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual7                       ,'Y',ItemList.EngineCylinderManual7);
        aMat = MT.Ir;                   kRegistry0.add("Diesel Engine (" + aMat.getLocal() + ")"                 , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 3300, NBT_OUTPUT,  512, NBT_ENERGY_EMITTED, TD.Energy.RU), "YYL", "RwM", "YYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26442), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaftManual8                       ,'Y',ItemList.EngineCylinderManual8);
        i=10150;
        aMat = MT.Bronze;               kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,   24, NBT_ENERGY_EMITTED, TD.Energy.RU), " YT", "RLM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26122), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft1,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder1,'T',ItemList.EngineTurbo1);
        aMat = MT.ArsenicCopper;        kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,   24, NBT_ENERGY_EMITTED, TD.Energy.RU), " YT", "RLM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(25352), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft2,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder2,'T',ItemList.EngineTurbo2);
        aMat = MT.ArsenicBronze;        kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,   36, NBT_ENERGY_EMITTED, TD.Energy.RU), " YT", "RLM", "dSO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(25377), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft3,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder3,'T',ItemList.EngineTurbo3);
        aMat = ANY.Steel;               kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,   48, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYT", "RLM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26142), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft4,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder4,'T',ItemList.EngineTurbo4);
        aMat = MT.Invar;                kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,   96, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYT", "RLM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26402), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft5,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder5,'T',ItemList.EngineTurbo5);
        aMat = MT.Ti;                   kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,  172, NBT_ENERGY_EMITTED, TD.Energy.RU), "SYT", "RLM", "dYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26182), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft6,'S',OP.screw.dat(aMat),'Y',ItemList.EngineCylinder6,'T',ItemList.EngineTurbo6);
        aMat = MT.TungstenSteel;        kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,  384, NBT_ENERGY_EMITTED, TD.Energy.RU), "YYT", "RLM", "YYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26222), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft7                       ,'Y',ItemList.EngineCylinder7,'T',ItemList.EngineTurbo7);
        aMat = MT.Ir;                   kRegistry0.add("Turbocharging Diesel Engine (" + aMat.getLocal() + ")"   , "ktfruaddon: Energy",  i++,  1304, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_FUELMAP, FM.Engine, NBT_EFFICIENCY, 5200, NBT_OUTPUT,  768, NBT_ENERGY_EMITTED, TD.Energy.RU), "YYT", "RLM", "YYO", 'M', OP.casingMachineDouble.dat(aMat), 'O', gRegistry.getItem(26442), 'C', OP.gearGtSmall.dat(aMat), 'L', OD.itemLubricant,'R',ItemList.EngineCrankShaft8                       ,'Y',ItemList.EngineCylinder8,'T',ItemList.EngineTurbo8);


        //Gas Battery
        aMat = MT.StainlessSteel;      kRegistry0.add("Gas Battery"                                             , "ktfruaddon: Energy",  10010, 1304, FuelBattery.class       , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.5F, NBT_RESISTANCE,  6.5F, NBT_FUELMAP , recipeMaps.FuelBattery, NBT_OUTPUT, 512 ,NBT_ENERGY_EMITTED, TD.Energy.EU));RM.Welder.addRecipeX(F,64,20,ST.array(OP.casingMachine.mat(aMat,1),ItemList.ProtonExchangeMembrane.get(8),kRegistry0.getItem(2)/*Teflon Pipe*/,gRegistry.getItem(29251,2)/*2x Pt Wire*/,OP.plate.mat(MT.Glass,4),OP.plate.mat(MT.Teflon,24)),ZL_FS,ZL_FS,kRegistry0.getItem(10010));

        //Manual Motor
        aClass=ManualGenerator.class;
        aMat = MT.WoodTreated;         kRegistry0.add("Manual Motor (Wood)"                                     , "ktfruaddon: Energy",  10021, 1304, aClass, aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.5F, NBT_RESISTANCE,  6.5F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_OUTPUT_MIN,4 ,NBT_OUTPUT_MAX,10, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_TEXTURE,"RU", kTileNBT.Generator.MAX_TIME,400),"PMP","SMS","GhC",'M',OP.plank.dat(aMat),'P', OD.itemLeather,'S',OP.stickLong.dat(aMat),'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat));
        aMat = MT.Bronze;              kRegistry0.add("Manual Motor (Bronze)"                                   , "ktfruaddon: Energy",  10022, 1304, aClass, aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.5F, NBT_RESISTANCE,  6.5F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_OUTPUT_MIN,14 ,NBT_OUTPUT_MAX,22, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_TEXTURE,"RU",kTileNBT.Generator.MAX_TIME,800),"PLP","SMS","GhC",'M',OP.casingMachine.dat(aMat),'L',OD.itemLubricant,'P', OD.itemLeather,'S',OP.stickLong.dat(aMat),'G', OP.gearGt.dat(aMat), 'C', OP.gearGtSmall.dat(aMat));
        aMat = MT.WoodTreated;         kRegistry0.add("Manual Motor (Wood)"                                     , "ktfruaddon: Energy",  10026, 1304, aClass, aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.5F, NBT_RESISTANCE,  6.5F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_OUTPUT_MIN,3 ,NBT_OUTPUT_MAX,8, NBT_ENERGY_EMITTED, TD.Energy.KU, NBT_TEXTURE,"KU", kTileNBT.Generator.MAX_TIME,200),"PMP","SMS","GhG",'M',OP.plank.dat(aMat),'P', OD.itemLeather,'S',OP.stickLong.dat(aMat),'G', OP.plate.dat(aMat));
        aMat = MT.Bronze;              kRegistry0.add("Manual Motor (Bronze)"                                   , "ktfruaddon: Energy",  10027, 1304, aClass, aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.5F, NBT_RESISTANCE,  6.5F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_OUTPUT_MIN,6 ,NBT_OUTPUT_MAX,16, NBT_ENERGY_EMITTED, TD.Energy.KU, NBT_TEXTURE,"KU",kTileNBT.Generator.MAX_TIME,400),"PLP","SMS","GhG",'M',OP.casingMachine.dat(aMat),'L',OD.itemLubricant,'P', OD.itemLeather,'S',OP.stickLong.dat(aMat),'G', OP.plate.dat(aMat));


        //20000-29999,Single block machines
        aClass = MultiTileEntityBasicMachine.class;
        //HU Machines,20000-20999
        i=20000;
        aMat = MT.DATA.Heat_T[1];   kRegistry0.add("Fluid Heater ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  32, NBT_TEXTURE, "fluidheater", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_UP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.FluidHeating,NBT_CHEAP_OVERCLOCKING,true), " L ", "PMP", " C ", 'M', OP.casingMachine.dat(aMat), 'P', gRegistry.getItem(26742),'L',gRegistry.getItem(26744) ,'C', OP.plateDouble.mat(MT.Cu,1));
        aMat = MT.DATA.Heat_T[2];   kRegistry0.add("Fluid Heater ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128, NBT_TEXTURE, "fluidheater", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_UP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.FluidHeating,NBT_CHEAP_OVERCLOCKING,true), " L ", "PMP", " C ", 'M', OP.casingMachine.dat(aMat), 'P', gRegistry.getItem(26402),'L',gRegistry.getItem(26404) ,'C', OP.plateDouble.mat(MT.Cu,1));
        aMat = MT.DATA.Heat_T[3];   kRegistry0.add("Fluid Heater ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512, NBT_TEXTURE, "fluidheater", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_UP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.FluidHeating,NBT_CHEAP_OVERCLOCKING,true), " L ", "PMP", " C ", 'M', OP.casingMachine.dat(aMat), 'P', gRegistry.getItem(26182),'L',gRegistry.getItem(26184) ,'C', OP.plateDouble.mat(MT.Cu,1));
        aMat = MT.DATA.Heat_T[4];   kRegistry0.add("Fluid Heater ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,2048, NBT_TEXTURE, "fluidheater", NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_B, NBT_TANK_SIDE_AUTO_IN, SIDE_BACK, NBT_TANK_SIDE_OUT, SBIT_U, NBT_TANK_SIDE_AUTO_OUT, SIDE_UP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.FluidHeating,NBT_CHEAP_OVERCLOCKING,true), " L ", "PMP", " C ", 'M', OP.casingMachine.dat(aMat), 'P', gRegistry.getItem(26242),'L',gRegistry.getItem(26244) ,'C', OP.plateDouble.mat(MT.Cu,1));

        //RU Machines,21000-21999

        //KU Machines,22000-22999
        i=22000;
        aClass= tankGasCompressedInputer.class;
        aMat = MT.DATA.Kinetic_T[1];   kRegistry0.add("Gas Compressor ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  32, NBT_TEXTURE, "tankgascompressedinputer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_UP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.Code,NBT_TANK_CAPACITY,4000   ), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[2];   kRegistry0.add("Gas Compressor ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128, NBT_TEXTURE, "tankgascompressedinputer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_UP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.Code,NBT_TANK_CAPACITY,20000  ), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[3];   kRegistry0.add("Gas Compressor ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512, NBT_TEXTURE, "tankgascompressedinputer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_UP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.Code,NBT_TANK_CAPACITY,200000 ), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[4];   kRegistry0.add("Gas Compressor ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,2048, NBT_TEXTURE, "tankgascompressedinputer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_UP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.Code,NBT_TANK_CAPACITY,800000 ), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Kinetic_T[5];   kRegistry0.add("Gas Compressor ("+ aMat.getLocal() +")"                 , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,8192, NBT_TEXTURE, "tankgascompressedinputer", NBT_ENERGY_ACCEPTED, TD.Energy.KU, NBT_INV_SIDE_IN, SBIT_I, NBT_INV_SIDE_AUTO_IN, SIDE_INSIDE, NBT_INV_SIDE_OUT, SBIT_I, NBT_INV_SIDE_AUTO_OUT, SIDE_INSIDE, NBT_TANK_SIDE_IN, SBIT_U, NBT_TANK_SIDE_AUTO_IN, SIDE_UP, NBT_TANK_SIDE_OUT, SBIT_B, NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK, NBT_ENERGY_ACCEPTED_SIDES, SBIT_D, NBT_RECIPEMAP, recipeMaps.Code,NBT_TANK_CAPACITY,4000000), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', IL.Comp_Laser_Gas_Ne, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));

        //LU Machines,23000-23999
        aClass = MultiTileEntityBasicMachine.class;
        //Assembler
        i=23000;
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Circuit Assembler (T1)"                         , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,     32, NBT_TEXTURE, "laserwelder", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[1], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Circuit Assembler (T2)"                         , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,    128, NBT_TEXTURE, "laserwelder", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[2], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Circuit Assembler (T3)"                         , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,    512, NBT_TEXTURE, "laserwelder", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Circuit Assembler (T4)"                         , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   2048, NBT_TEXTURE, "laserwelder", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Circuit Assembler (T5)"                         , "kTFRUAddon: Machines"                       , i++,20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   8192, NBT_TEXTURE, "laserwelder", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.Assembler, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[5], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Yellow], 'T', OP.screw.dat(aMat), 'G', OP.gearGt.dat(aMat));
        //Laser Cutter
        i=23010;
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Laser Cutter (T1)"                              , "kTFRUAddon: Machines"                      , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   32  , NBT_TEXTURE, "lasercutter", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.LaserCutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[1], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Laser Cutter (T2)"                              , "kTFRUAddon: Machines"                      , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   128 , NBT_TEXTURE, "lasercutter", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.LaserCutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[2], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Laser Cutter (T3)"                              , "kTFRUAddon: Machines"                      , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   512 , NBT_TEXTURE, "lasercutter", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.LaserCutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[3], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Laser Cutter (T4)"                              , "kTFRUAddon: Machines"                      , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   2048, NBT_TEXTURE, "lasercutter", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.LaserCutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[4], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Laser Cutter (T5)"                              , "kTFRUAddon: Machines"                      , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   8192, NBT_TEXTURE, "lasercutter", NBT_HAS_GLOWING_TEXTURE, true, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.LaserCutter, NBT_INV_SIDE_IN, SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_D|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_ENERGY_ACCEPTED_SIDES, SBIT_U), "TLT", "GPG", "CMC", 'M', OP.casingMachine.dat(aMat), 'P', OD.craftingHardenedClay, 'C', OD_CIRCUITS[5], 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'T', OP.screw.dat(aMat), 'G', OP.gearGtSmall.dat(aMat));
        //TU Machines,24000-24999
        ////Ultra Clean Bath  TODO:Recipe
        //i=24000;
        //aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Bath (Ultra Clean,"+VN[1]+")"    , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "ultracleanbath",    NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, recipeManager.UltraCleanBath   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Bath (Ultra Clean,"+VN[2]+")"    , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "ultracleanbath",    NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, recipeManager.UltraCleanBath   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Bath (Ultra Clean,"+VN[3]+")"    , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "ultracleanbath",    NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, recipeManager.UltraCleanBath   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Bath (Ultra Clean,"+VN[4]+")"    , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "ultracleanbath",    NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, recipeManager.UltraCleanBath   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Bath (Ultra Clean,"+VN[5]+")"    , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "ultracleanbath",    NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, recipeManager.UltraCleanBath   , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));

        //CU Machines,25000-25999

        //QU Machines,26000-26999

        //EU Machines,27000-28999
        aClass = MultiTileEntityBasicMachineElectric.class;
        //Heat Mixer
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Heat Mixer ("+VN[1]+")"          , "kTFRUAddon: Machines" , 27000, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,   32, NBT_TEXTURE, "heatmixer", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.HeatMixer        , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "PMP", "XRX", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[1], 'R', OP.rotor.dat(MT.StainlessSteel), 'X', OP.wireGt02.dat(MT.Cupronickel),'P', OP.plate.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Heat Mixer ("+VN[2]+")"          , "kTFRUAddon: Machines" , 27001, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  128, NBT_TEXTURE, "heatmixer", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.HeatMixer        , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "PMP", "XRX", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[2], 'R', OP.rotor.dat(MT.StainlessSteel), 'X', OP.wireGt04.dat(MT.Cupronickel),'P', OP.plateDouble.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Heat Mixer ("+VN[3]+")"          , "kTFRUAddon: Machines" , 27002, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT,  512, NBT_TEXTURE, "heatmixer", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.HeatMixer        , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "PMP", "XRX", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[3], 'R', OP.rotor.dat(MT.StainlessSteel), 'X', OP.wireGt08.dat(MT.Cupronickel),'P', OP.plateTriple.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Heat Mixer ("+VN[4]+")"          , "kTFRUAddon: Machines" , 27003, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "heatmixer", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.HeatMixer        , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "PMP", "XRX", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[4], 'R', OP.rotor.dat(MT.StainlessSteel), 'X', OP.wireGt08.dat(MT.Nichrome),'P', OP.plateQuadruple.dat(MT.StainlessSteel));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Heat Mixer ("+VN[5]+")"          , "kTFRUAddon: Machines" , 27004, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "heatmixer", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.HeatMixer        , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T), "PMP", "XRX", "hSw", 'M', OP.casingMachine.dat(aMat), 'S', IL.MOTORS[5], 'R', OP.rotor.dat(MT.StainlessSteel), 'X', OP.wireGt12.dat(MT.Nichrome),'P', OP.plateQuadruple.dat(MT.StainlessSteel));

        ////CVD Machine  TODO:Recipe
        //i=27020;
        //aClass= testGuiMachine.class;
        //aMat = MT.DATA.Electric_T[1];   kRegistry0.add("CVD Machine ("+VN[1]+")"         , "kTFRUAddon: Machines" , 27020, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "cvdmachine" ,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.CVD              , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[2];   kRegistry0.add("CVD Machine ("+VN[2]+")"         , "kTFRUAddon: Machines" , 27021, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "cvdmachine" ,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.CVD              , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[3];   kRegistry0.add("CVD Machine ("+VN[3]+")"         , "kTFRUAddon: Machines" , 27022, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "cvdmachine" ,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.CVD              , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[4];   kRegistry0.add("CVD Machine ("+VN[4]+")"         , "kTFRUAddon: Machines" , 27023, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "cvdmachine" ,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.CVD              , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));
        //aMat = MT.DATA.Electric_T[5];   kRegistry0.add("CVD Machine ("+VN[5]+")"         , "kTFRUAddon: Machines" , 27024, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "cvdmachine" ,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.CVD              , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T));

        //EDA Machine
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Electronics Designer ("+VN[1]+")", "kTFRUAddon: Machines" , 27030, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "eda"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.EDA        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"BSB","BCB","BwB",'B',OD_CIRCUITS[2],'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Electronics Designer ("+VN[2]+")", "kTFRUAddon: Machines" , 27031, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "eda"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.EDA        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"BSB","BCB","BwB",'B',OD_CIRCUITS[4],'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1)); CR.shaped(kRegistry0.getItem(i),DEF,"BSB","PCP","BwB",'B',"ktfruNoviceComputer",'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1),'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Electronics Designer ("+VN[3]+")", "kTFRUAddon: Machines" , 27032, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "eda"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.EDA        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"BSB","BCB","BwB",'B',OD_CIRCUITS[6],'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1));  CR.shaped(kRegistry0.getItem(i),DEF,"BSB","PCP","BwB",'B',"ktfruModerateComputer",'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1),'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Electronics Designer ("+VN[4]+")", "kTFRUAddon: Machines" , 27033, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "eda"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.EDA        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"BSB","PCP","BwB",'B',"ktfruAdvancedComputer",'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1),'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Electronics Designer ("+VN[5]+")", "kTFRUAddon: Machines" , 27034, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "eda"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.EDA        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"BSB","PCP","BwB",'B',"ktfruEliteComputer",'C',OP.casingMachine.mat(aMat,1),'S',OP.plate.mat(MT.Glass,1),'P',OP.plate.mat(aMat,1));
        //Flaw Detector
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Flaw Detector ("+VN[1]+")", "kTFRUAddon: Machines" , 27040, 20001, FlawDetector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "flawdetector"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.FlawDetector        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"wPO","C S","WMW",'C',ItemList.Co60FlawDetectionCore, 'M', OP.casingMachine.dat(aMat),'S',IL.Sensor_MV,'O',"ktfruBasicComputer"   ,'W', gRegistry.getItem(28351),'P',OP.plate.dat(aMat));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Flaw Detector ("+VN[2]+")", "kTFRUAddon: Machines" , 27041, 20001, FlawDetector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "flawdetector"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.FlawDetector        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"wPO","C S","WMW",'C',ItemList.Co60FlawDetectionCore, 'M', OP.casingMachine.dat(aMat),'S',IL.Sensor_HV,'O',"ktfruNoviceComputer"  ,'W', gRegistry.getItem(28701),'P',OP.plate.dat(aMat));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Flaw Detector ("+VN[3]+")", "kTFRUAddon: Machines" , 27042, 20001, FlawDetector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "flawdetector"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.FlawDetector        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"wPO","C S","WMW",'C',ItemList.Co60FlawDetectionCore, 'M', OP.casingMachine.dat(aMat),'S',IL.Sensor_EV,'O',"ktfruModerateComputer",'W', gRegistry.getItem(28401),'P',OP.plate.dat(aMat));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Flaw Detector ("+VN[4]+")", "kTFRUAddon: Machines" , 27043, 20001, FlawDetector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "flawdetector"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.FlawDetector        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"wPO","C S","WMW",'C',ItemList.Co60FlawDetectionCore, 'M', OP.casingMachine.dat(aMat),'S',IL.Sensor_IV,'O',"ktfruAdvancedComputer",'W', gRegistry.getItem(29001),'P',OP.plate.dat(aMat));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Flaw Detector ("+VN[5]+")", "kTFRUAddon: Machines" , 27044, 20001, FlawDetector.class, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "flawdetector"      , NBT_HAS_GLOWING_TEXTURE, true,              NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.FlawDetector        ,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_L       , NBT_INV_SIDE_AUTO_IN, SIDE_LEFT  , NBT_INV_SIDE_OUT, SBIT_R       , NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN,  SBIT_U      , NBT_TANK_SIDE_AUTO_IN, SIDE_UP,   NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"wPO","C S","WMW",'C',ItemList.Co60FlawDetectionCore, 'M', OP.casingMachine.dat(aMat),'S',IL.Sensor_LuV,'O',"ktfruEliteComputer"  ,'W', gRegistry.getItem(29251),'P',OP.plate.dat(aMat));

        //Wafer Tester
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Wafer Tester ("+VN[1]+")"        , "kTFRUAddon: Machines" , 27500, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "wafertester", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferTester,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"ELE","SPS","BCB",'E',IL.Emitter_MV.get(1),'S',IL.Sensor_MV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',OD_CIRCUITS[2],'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Wafer Tester ("+VN[2]+")"        , "kTFRUAddon: Machines" , 27501, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "wafertester", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferTester,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"ELE","SPS","BCB",'E',IL.Emitter_HV.get(1),'S',IL.Sensor_HV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',OD_CIRCUITS[4],'P',OP.plate.mat(aMat,1));CR.shaped(kRegistry0.getItem(i),DEF,"ELE","SPS","BCB",'E',IL.Emitter_HV.get(1),'S',IL.Sensor_HV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',"ktfruNoviceComputer",'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Wafer Tester ("+VN[3]+")"        , "kTFRUAddon: Machines" , 27502, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "wafertester", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferTester,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"ELE","SPS","BCB",'E',IL.Emitter_EV.get(1),'S',IL.Sensor_EV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',OD_CIRCUITS[6],'P',OP.plate.mat(aMat,1));CR.shaped(kRegistry0.getItem(i),DEF,"ELE","SPS","BCB",'E',IL.Emitter_EV.get(1),'S',IL.Sensor_EV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',"ktfruModerateComputer",'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Wafer Tester ("+VN[4]+")"        , "kTFRUAddon: Machines" , 27503, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "wafertester", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferTester,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"ELE","SPS","BCB",'E',IL.Emitter_IV.get(1),'S',IL.Sensor_IV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',"ktfruAdvancedComputer",'P',OP.plate.mat(aMat,1));
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Wafer Tester ("+VN[5]+")"        , "kTFRUAddon: Machines" , 27504, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "wafertester", NBT_HAS_GLOWING_TEXTURE, true,       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferTester,NBT_CHEAP_OVERCLOCKING,true, NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"ELE","SPS","BCB",'E',IL.Emitter_LuV.get(1),'S',IL.Sensor_LuV.get(1),'L',DYE_OREDICTS_LENS[DYE_INDEX_Red],'C',OP.casingMachine.mat(aMat,1),'B',"ktfruEliteComputer",'P',OP.plate.mat(aMat,1));
        //Wafer Coater
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Wafer Coater ("+VN[1]+")"        , "kTFRUAddon: Machines" , 27510, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32  , NBT_TEXTURE, "wafercoater",       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferCoater      , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"WPW","wSC","BMR",'B',OD_CIRCUITS[2]         ,'S',OP.plate.mat(aMat,1),'C',OP.casingMachine.mat(aMat,1),'M',IL.Electric_Motor_LV .get(1),'P',gRegistry.getItem(26261)/*aMat small pipe*/,'R',OP.stick.mat(aMat,1),'W',gRegistry.getItem(28351)/*2x Copper wire*/);
        aMat = MT.DATA.Electric_T[2];   kRegistry0.add("Wafer Coater ("+VN[2]+")"        , "kTFRUAddon: Machines" , 27511, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 128 , NBT_TEXTURE, "wafercoater",       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferCoater      , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"WPW","wSC","BMR",'B',OD_CIRCUITS[4]         ,'S',OP.plate.mat(aMat,1),'C',OP.casingMachine.mat(aMat,1),'M',IL.Electric_Motor_MV .get(1),'P',gRegistry.getItem(26342)/*aMat pipe*/,      'R',OP.stick.mat(aMat,1),'W',gRegistry.getItem(28701)/*2x Gold wire*/);
        aMat = MT.DATA.Electric_T[3];   kRegistry0.add("Wafer Coater ("+VN[3]+")"        , "kTFRUAddon: Machines" , 27512, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 512 , NBT_TEXTURE, "wafercoater",       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferCoater      , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"WPW","wSC","BMR",'B',OD_CIRCUITS[6]         ,'S',OP.plate.mat(aMat,1),'C',OP.casingMachine.mat(aMat,1),'M',IL.Electric_Motor_HV .get(1),'P',gRegistry.getItem(26261)/*aMat pipe*/,      'R',OP.stick.mat(aMat,1),'W',gRegistry.getItem(28401)/*2x Annealed Copper wire*/);
        aMat = MT.DATA.Electric_T[4];   kRegistry0.add("Wafer Coater ("+VN[4]+")"        , "kTFRUAddon: Machines" , 27513, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 2048, NBT_TEXTURE, "wafercoater",       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferCoater      , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"WPW","wSC","BMR",'B',"ktfruAdvancedComputer",'S',OP.plate.mat(aMat,1),'C',OP.casingMachine.mat(aMat,1),'M',IL.Electric_Motor_EV .get(1),'P',gRegistry.getItem(26282)/*aMat pipe*/,      'R',OP.stick.mat(aMat,1),'W',gRegistry.getItem(29001)/*2x Al wire*/);
        aMat = MT.DATA.Electric_T[5];   kRegistry0.add("Wafer Coater ("+VN[5]+")"        , "kTFRUAddon: Machines" , 27514, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 8192, NBT_TEXTURE, "wafercoater",       NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.WaferCoater      , NBT_INV_SIDE_IN, SBIT_U|SBIT_L, NBT_INV_SIDE_AUTO_IN, SIDE_LEFT, NBT_INV_SIDE_OUT, SBIT_R|SBIT_D, NBT_INV_SIDE_AUTO_OUT, SIDE_RIGHT, NBT_TANK_SIDE_IN, SBIT_U|SBIT_L, NBT_TANK_SIDE_AUTO_IN, SIDE_TOP, NBT_TANK_SIDE_OUT, SBIT_R|SBIT_D, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_ENERGY_ACCEPTED_SIDES, SBIT_B, NBT_USE_OUTPUT_TANK, T),"WPW","wSC","BMR",'B',"ktfruEliteComputer"   ,'S',OP.plate.mat(aMat,1),'C',OP.casingMachine.mat(aMat,1),'M',IL.Electric_Motor_LuV.get(1),'P',gRegistry.getItem(26182)/*aMat pipe*/,      'R',OP.stick.mat(aMat,1),'W',gRegistry.getItem(29251)/*2x Pt wire*/);

        i=28990;
        aClass= exampleMachine.class;
        aMat = MT.DATA.Electric_T[1];   kRegistry0.add("Example Machine ("+VN[1]+")"        , "kTFRUAddon: Machines" , i++, 20001, aClass, aMat.mToolQuality, 16, aMachine     , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   4.0F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_INPUT, 32,NBT_INPUT_MIN,16,NBT_INPUT_MAX,64 ,NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_INV_SIDE_AUTO_IN,SIDE_FRONT, /*Use this as another inv autoIn*/NBT_TANK_SIDE_AUTO_IN,SIDE_BACK,NBT_INV_SIDE_AUTO_OUT,SIDE_UP));
        //RF Machines,29000-29999

    //Multiblock

        //testMachine
        //kRegistry0.add("ktest Large Bathing Vat" , "Example Mod", i++, 0, exampleMachineComplex.class , MT.StainlessSteel.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, MT.StainlessSteel, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "klargebath"               , NBT_INPUT,    1                      , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Bath     , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "APA", 'M', kRegistry0.getItem(12000), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(MT.StainlessSteel), 'A', IL.ROBOT_ARMS[2]);

        //aMat = MT.StainlessSteel;              kRegistry0.add("CNC Machine", "kTFRUAddon: Multiblock", 30001, 17200, CNCMachine.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "CNCMachine", NBT_INPUT, 128,NBT_INPUT_MIN , 64, NBT_INPUT_MAX,256, NBT_ENERGY_ACCEPTED, TD.Energy.EU),
        //        "SLS", "XwX", "CMC", 'L',  DYE_OREDICTS_LENS[DYE_INDEX_Blue], 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));


        //aMat = MT.Osmiridium;      kRegistry0.add("Particle Collider"  , "kTFRUAddon: MultiBlock", 30002, 17200, particleCollider.class    , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "particlecollider"        , NBT_INPUT, 8192, NBT_INPUT_MIN,    1, NBT_INPUT_MAX,   524288  , NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeManager.ParticleCollider     , NBT_ENERGY_ACCEPTED_2, TD.Energy.EU, NBT_SPECIAL_IS_START_ENERGY, T),
         //       "FFF", "FMF", "FFF", 'M', kRegistry0.getItem(18014), 'F', IL.FIELD_GENERATORS[5]);

        aMat = MT.Al;              kRegistry0.add("Mask Aligner (UV)"                                  , "kTFRUAddon: Multiblock", 30003, 17200, maskAlignerUV.class          , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 4.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "maskAlignerUV"    , NBT_INPUT,  128, NBT_INPUT_MIN, 64  , NBT_INPUT_MAX,  256, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.MaskAligner      ,NBT_INV_SIDE_AUTO_IN, SIDE_UP, NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  ), "SLS", "XwX", "CMC", 'L', IL.Comp_Laser_Gas_Ar, 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tiny Distillation Tower"                            , "kTFRUAddon: Multiblock", 30004, 17200, TinyDistillTower.class       , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtower", NBT_INPUT,  512, NBT_INPUT_MIN, 16  , NBT_INPUT_MAX, 1024, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, recipeMaps.TinyDistillTower ,                               NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T ), "QPQ", "PMP", "QPQ", 'M', gRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat),'Q',OP.pipeLarge.dat(aMat));
                                   kRegistry0.add("Small Distillation Tower"                           , "kTFRUAddon: Multiblock", 30005, 17200, SmallDistillTower.class      , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtower", NBT_INPUT,  512, NBT_INPUT_MIN, 16  , NBT_INPUT_MAX, 2048, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, recipeMaps.SmallDistillTower,                               NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T ), "PQP", "PMP", "PQP", 'M', gRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat),'Q',OP.pipeLarge.dat(aMat));
                                   kRegistry0.add("Distillation Tower"                                 , "kTFRUAddon: Multiblock", 30006, 17200, DistillTower.class           , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "distillationtower", NBT_INPUT,  512, NBT_INPUT_MIN, 16  , NBT_INPUT_MAX, 4096, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_RECIPEMAP, recipeMaps.DistillTower     ,                               NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  , NBT_TANK_SIDE_AUTO_OUT, SIDE_BACK  , NBT_CHEAP_OVERCLOCKING, T  ), "PPP", "PMP", "PPP", 'M', gRegistry.getItem(18102), 'P', OP.pipeNonuple.dat(aMat));
                                   kRegistry0.add("Sun Heater"                                         , "kTFRUAddon: Multiblock", 30007, 17200, SunHeater.class              , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F), " R ", "hMs", " R ", 'M', kRegistry0.getItem(18029), 'R', OP.ring.dat(aMat));
                                   //kRegistry0.add("TFRU ModelTestMchine"                               , "kTFRUAddon: Multiblock", 30008, 17200, exampleMachineModel.class , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F, NBT_TEXTURE, "klargebath"               , NBT_INPUT,    1   , NBT_ENERGY_ACCEPTED, TD.Energy.TU, NBT_RECIPEMAP, RM.Bath  , NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM, NBT_TANK_SIDE_AUTO_OUT, SIDE_BOTTOM                           , NBT_PARALLEL,  64                          , NBT_NO_CONSTANT_POWER, T), "CRC", "PMP", "APA", 'M', kRegistry0.getItem(12000), 'R', IL.Processor_Crystal_Ruby, 'C', OD_CIRCUITS[6], 'P', OP.plateDense.dat(MT.StainlessSteel), 'A', IL.ROBOT_ARMS[2]);
                                   kRegistry0.add("Mask Aligner (UV+)"                                 , "kTFRUAddon: Multiblock", 30009, 17200, maskAlignerUVPlus.class      , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  8.0F, NBT_RESISTANCE, 4.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),                                   NBT_INPUT,  512, NBT_INPUT_MIN , 256, NBT_INPUT_MAX, 1024, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.MaskAligner      ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM), "SLS", "XwX", "CMC", 'L',IL.Comp_Laser_Gas_Ar, 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));
        aMat = MT.Cr;              kRegistry0.add("Mask Aligner (DUV)"                                 , "kTFRUAddon: Multiblock", 30010, 17200, maskAlignerDUV.class         , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 12.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),                                   NBT_INPUT, 2048, NBT_INPUT_MIN ,1024, NBT_INPUT_MAX, 4096, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.MaskAligner      ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  ), "SLS", "XwX", "CMC", 'L',IL.Comp_Laser_Gas_Ar, 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));
        aMat = MT.W;               kRegistry0.add("Mask Aligner (EUV)"                                 , "kTFRUAddon: Multiblock", 30011, 17200, maskAlignerEUV.class         , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 14.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),                                   NBT_INPUT, 8192, NBT_INPUT_MIN ,4096, NBT_INPUT_MAX,16384, NBT_ENERGY_ACCEPTED, TD.Energy.LU, NBT_RECIPEMAP, recipeMaps.MaskAligner      ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BACK  ), "SLS", "XwX", "CMC", 'L',IL.Comp_Laser_Gas_Ar, 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));
        aMat = MT.Al;              kRegistry0.add("3-axle CNC Machine"                                 , "kTFRUAddon: Multiblock", 30012, 17200, CNCMachine3.class            , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "cncmachine3",       NBT_INPUT,  128, NBT_INPUT_MIN ,  64, NBT_INPUT_MAX,  256, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, recipeMaps.CNCMachine       ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM), "GLG", "hCs", "WMW", 'C', "ktfruBasicComputer", 'W', OP.wireFine.dat(MT.Ag), 'G', OP.dust.dat(ANY.Glowstone),'L',OP.plate.mat(MT.Glass,1),'M',OP.casingMachine.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Oil Miner"                                          , "kTFRUAddon: Multiblock", 30013, 17200, oilMiner.class               , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid), NBT_TEXTURE, "oilminer",          NBT_INPUT,  128, NBT_INPUT_MIN ,  16, NBT_INPUT_MAX, 1024, NBT_ENERGY_ACCEPTED, TD.Energy.KU                                                ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM ,NBT_DESIGN, 18002, NBT_CHEAP_OVERCLOCKING, true), "hMs", "PIP", "RIR", 'C', IL.Circuit_Advanced, 'R', OP.ring.dat(aMat),'P',OP.plate.dat(aMat),'I',gRegistry.getItem(26165),'M',gRegistry.getItem(18002));OreDictManager.INSTANCE.setItemData(kRegistry0.getItem(30013),new OreDictItemData(aMat,30*U+U2));

        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Fusion Reactor (T\u00a7be\u00a7r)"          , "kTFRUAddon: Multiblock", 30014, 17200, fusionReactorTokamakExp.class, aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),                                   NBT_INPUT, 2048, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Fusion                      ,NBT_ENERGY_ACCEPTED_2, TD.Energy.LU, NBT_SPECIAL_IS_START_ENERGY, T, NBT_NO_CONSTANT_POWER, T, NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM), "hMs", "PIP", "RIR", 'C', IL.Circuit_Advanced, 'R', OP.ring.dat(aMat),'P',OP.plate.dat(aMat),'I',gRegistry.getItem(26165),'M',gRegistry.getItem(18002));OreDictManager.INSTANCE.setItemData(kRegistry0.getItem(30013),new OreDictItemData(aMat,30*U+U2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Fusion Reactor (T1)"                        , "kTFRUAddon: Multiblock", 30015, 17200, fusionReactorTokamakT1.class , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F,NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),                                   NBT_INPUT,16384, NBT_ENERGY_ACCEPTED, TD.Energy.EU, NBT_RECIPEMAP, RM.Fusion                      ,NBT_ENERGY_ACCEPTED_2, TD.Energy.LU, NBT_SPECIAL_IS_START_ENERGY, T, NBT_NO_CONSTANT_POWER, T ,NBT_INV_SIDE_AUTO_IN, SIDE_UP ,NBT_INV_SIDE_AUTO_OUT, SIDE_BOTTOM), "hMs", "PIP", "RIR", 'C', IL.Circuit_Advanced, 'R', OP.ring.dat(aMat),'P',OP.plate.dat(aMat),'I',gRegistry.getItem(26165),'M',gRegistry.getItem(18002));OreDictManager.INSTANCE.setItemData(kRegistry0.getItem(30013),new OreDictItemData(aMat,30*U+U2));

        aMat = MT.StainlessSteel;  kRegistry0.add("Magnalium Gas Turbine Main Housing"                  , "kTFRUAddon: Multiblock", 30016, 17200, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 31029, NBT_OUTPUT,   2048, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', kRegistry0.getItem(30020), 'B', "gt:re-battery1", 'C', OD_CIRCUITS[4], 'E', IL.MOTORS[1], 'P', OP.plateDense.dat(MT.Invar));
        aMat = MT.Ti;              kRegistry0.add("Trinitanium Gas Turbine Main Housing"                , "kTFRUAddon: Multiblock", 30017, 17200, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 31030, NBT_OUTPUT,   4096, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', kRegistry0.getItem(30021), 'B', "gt:re-battery2", 'C', OD_CIRCUITS[5], 'E', IL.MOTORS[2], 'P', OP.plateDense.dat(MT.TungstenSteel));
        aMat = MT.TungstenSteel;   kRegistry0.add("Graphene Gas Turbine Main Housing"                   , "kTFRUAddon: Multiblock", 30018, 17200, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 31031, NBT_OUTPUT,  16384, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', kRegistry0.getItem(30022), 'B', "gt:re-battery3", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[3], 'P', OP.plateDense.dat(MT.W));
        aMat = MT.Ad;              kRegistry0.add("Vibramantium Gas Turbine Main Housing"               , "kTFRUAddon: Multiblock", 30019, 17200, MultiTileEntityLargeTurbineGas.class     , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "gasturbine"              , NBT_DESIGN, 31032, NBT_OUTPUT, 131072, NBT_WASTE_ENERGY, F, NBT_LIMIT_CONSUMPTION, T, NBT_ENERGY_ACCEPTED, TD.Energy.HU, NBT_ENERGY_EMITTED, TD.Energy.RU, NBT_FUELMAP, FM.Gas), "PwP", "BMC", "PEP", 'M', kRegistry0.getItem(30023), 'B', "gt:re-battery4", 'C', OD_CIRCUITS[6], 'E', IL.MOTORS[4], 'P', OP.plateDense.dat(MT.Ad));
        
        aMat = MT.StainlessSteel;  kRegistry0.add("Magnalium Steam Turbine Main Housing"                , "kTFRUAddon: Multiblock", 30020, 17200, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 31029, NBT_INPUT,   6144*STEAM_PER_EU, NBT_OUTPUT,   2048, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "wPc", "PMP", "DPC", 'M', gRegistry.getItem(18022),'D',ItemList.VibrateDetector,'C',OD_CIRCUITS[4], 'P', OP.blockPlate.dat(MT.Magnalium));
        aMat = MT.Ti;              kRegistry0.add("Trinitanium Steam Turbine Main Housing"              , "kTFRUAddon: Multiblock", 30021, 17200, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   9.0F, NBT_RESISTANCE,   9.0F, NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 31030, NBT_INPUT,  12288*STEAM_PER_EU, NBT_OUTPUT,   4096, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "wPc", "PMP", "DPC", 'M', gRegistry.getItem(18026),'D',ItemList.VibrateDetector,'C',OD_CIRCUITS[5], 'P', OP.blockPlate.dat(MT.Trinitanium));
        aMat = MT.TungstenSteel;   kRegistry0.add("Graphene Steam Turbine Main Housing"                 , "kTFRUAddon: Multiblock", 30022, 17200, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  12.5F, NBT_RESISTANCE,  12.5F, NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 31031, NBT_INPUT,  24576*STEAM_PER_EU, NBT_OUTPUT,  16384, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "wPc", "PMP", "DPC", 'M', gRegistry.getItem(18023),'D',ItemList.VibrateDetector,'C',OD_CIRCUITS[6], 'P', OP.blockPlate.dat(MT.Graphene));
        aMat = MT.Ad;              kRegistry0.add("Vibramantium Steam Turbine Main Housing"             , "kTFRUAddon: Multiblock", 30023, 17200, MultiTileEntityLargeTurbineSteam.class   , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS, 100.0F, NBT_RESISTANCE, 100.0F, NBT_TEXTURE, "largeturbine"            , NBT_DESIGN, 31032, NBT_INPUT, 196608*STEAM_PER_EU, NBT_OUTPUT, 131072, NBT_WASTE_ENERGY, T, NBT_ENERGY_ACCEPTED, TD.Energy.STEAM, NBT_ENERGY_EMITTED, TD.Energy.RU), "wPc", "PMP", "DPC", 'M', gRegistry.getItem(18025),'D',ItemList.VibrateDetector,'C',OD_CIRCUITS[6], 'P', OP.blockPlate.dat(MT.Vibramantium));

        aMat = MT.Steel;           kRegistry0.add("Steel Compressed Gas Tank Main Valve"               , "kTFRUAddon: Multiblock", 30100, 17200, tankGasCompressed.class      , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000000L, NBT_DESIGN, 18029, NBT_GASPROOF, T, NBT_ACIDPROOF, F, NBT_PLASMAPROOF, F  ), " R ", "hMs", " R ", 'M', gRegistry.getItem(18029), 'R', OP.ring.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Stainless Steel Compressed Gas Tank Main Valve"     , "kTFRUAddon: Multiblock", 30101, 17200, tankGasCompressed.class      , aMat.mToolQuality, 16, aMachine, UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,  6.0F, NBT_RESISTANCE, 6.0F, NBT_TEXTURE, "tankmetal"               , NBT_TANK_CAPACITY,    6912000000L, NBT_DESIGN, 18022, NBT_GASPROOF, T, NBT_ACIDPROOF, T, NBT_PLASMAPROOF, F  ), " R ", "hMs", " R ", 'M', gRegistry.getItem(18029), 'R', OP.ring.dat(aMat));

        //parts
        aClass = CommonPart.class;
        aMat = MT.Al;              kRegistry0.add("Aluminium Wall"  , "kTFRUAddon: Multiblock", 31000, 17200, aClass , aMat.mToolQuality, 64, aMachine   , UT.NBT.make(NBT_MATERIAL, MT.Al, NBT_HARDNESS,   4.0F, NBT_RESISTANCE,   12.0F, NBT_TEXTURE, "wall" , NBT_DESIGNS, 7),"wPP", "hPP", 'P', OP.plate.dat(aMat)); RM.Welder.addRecipe2(F, 16, 256, OP.plate.mat(aMat, 4), ST.tag(10), kRegistry0.getItem());
        aClass= SunHeaterMirror.class;
        aMat = MT.Al;              kRegistry0.add("Sun Heater Mirror"     , "kTFRUAddon: Multiblock", 31001, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F));
        aClass=CommonPart.class;
        aMat = MT.Ag;              kRegistry0.add("Sunlight Absorber"                              , "kTFRUAddon: Multiblock", 31002, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "sunlightabsorber"   , NBT_DESIGNS, 2), " A ","CMC","wPh",'A', matList.PotassiumSodium.getDust(1),'M',OP.casingMachineDouble.dat(aMat),'C',OP.dust.dat(MT.C),'P',OP.pipeQuadruple.dat(aMat));
                                   kRegistry0.add("Sun Heater Transmitter"                         , "kTFRUAddon: Multiblock", 31003, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "heattransmitter"   , NBT_DESIGNS, 2), "AAA","AMA","wPh",'A', matList.PotassiumSodium.getDust(1),'M',OP.casingMachine.dat(aMat),'P',OP.pipeNonuple.dat(aMat));
                                   kRegistry0.add("Sun Heater Top Layer"                           , "kTFRUAddon: Multiblock", 31004, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "sunheatertoplayer"   , NBT_DESIGNS, 2), "LAL","AMA","wPh",'A', matList.PotassiumSodium.getDust(1),'M',OP.casingMachine.dat(aMat),'P',OP.pipeNonuple.dat(aMat),'L',OP.plateDense.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Mask Aligner Platform Motor"                    , "kTFRUAddon: Multiblock", 31005, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), "WSW","CSC","wMh", 'S',OP.stickLong.dat(aMat),'W',OP.wireGt04.dat(MT.Ag),'M',OP.casingMachine.dat(aMat),'C',IL.CONVEYERS[3]);
                                   kRegistry0.add("Mask Aligner Wafer Platform"                    , "kTFRUAddon: Multiblock", 31006, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), "   ","WRW","wMh", 'P',OP.plate.dat(aMat),'W',OP.wireGt04.dat(MT.Ag),'M',gRegistry.getItem(18002),'R',OP.plate.dat(aMat));
        aMat = MT.Al;              kRegistry0.add("CNC Platform"                                   , "kTFRUAddon: Multiblock", 31007, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), "   "," P ","wMh", 'M',kRegistry0.getItem(31000),'P',OP.plate.dat(MT.StainlessSteel));
                                   kRegistry0.add("CNC Motor"                                      , "kTFRUAddon: Multiblock", 31008, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), " C ","WPW","wMh", 'P',IL.MOTORS[2],'W',OP.wireGt02.dat(MT.Ag),'M',kRegistry0.getItem(31000),'C',IL.Circuit_Advanced);
        aMat = MT.StainlessSteel;  kRegistry0.add("CNC Cutter Head"                                , "kTFRUAddon: Multiblock", 31009, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), "WRW","PMP","wSf", 'R',IL.MOTORS[3],'W',OP.wireGt04.dat(MT.Ag),'M',OP.casingMachine.mat(MT.StainlessSteel,1),'P',gRegistry.getItem(26340),'S',OP.stick.mat(MT.Cr,1));
                                   kRegistry0.add("Light Module (UV)"                              , "kTFRUAddon: Multiblock", 31010, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "lightmodule"   , NBT_DESIGNS, 2), "SwS", "PLP", "XMX", 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue] , 'S', OP.stick.dat(aMat), 'X', OP.wireGt02.dat(MT.Cu), 'M', OP.casingMachine.dat(aMat),'P',OP.plate.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Light Module (UV+)"                             , "kTFRUAddon: Multiblock", 31011, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2),        "SwS", "PLP", "XMX", 'L', DYE_OREDICTS_LENS[DYE_INDEX_Blue] , 'S', OP.stick.dat(aMat), 'X', OP.wireGt02.dat(MT.Au), 'M', OP.casingMachine.dat(aMat),'P',OP.plate.dat(aMat));
        aMat = MT.Cr;              kRegistry0.add("Light Module (DUV)"                             , "kTFRUAddon: Multiblock", 31012, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.TungstenSteel;   kRegistry0.add("Light Module (EUV)"                             , "kTFRUAddon: Multiblock", 31013, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Oil Miner Drill"                                , "kTFRUAddon: Multiblock", 31014, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2), "h  ", "sMP", "EIR", 'C', IL.Circuit_Advanced, 'R', OP.ring.dat(aMat),'P',OP.plate.dat(aMat),'I',gRegistry.getItem(26162),'M',gRegistry.getItem(18002),'E',gRegistry.getItem(26161)); OreDictManager.INSTANCE.setItemData(kRegistry0.getItem(31014),new OreDictItemData(aMat,9*U+U4));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Vacuum Plasma Pump"                     , "kTFRUAddon: Multiblock", 31015, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Conductor (T\u00a7be\u00a7r)"  , "kTFRUAddon: Multiblock", 31016, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Coil (T\u00a7be\u00a7r)"       , "kTFRUAddon: Multiblock", 31017, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Wall (T\u00a7be\u00a7r)"       , "kTFRUAddon: Multiblock", 31018, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Plasma Pipe"                            , "kTFRUAddon: Multiblock", 31019, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.Al;              kRegistry0.add("Mask Aligner IO Manager (UV)"                   , "kTFRUAddon: Multiblock", 31020, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "iomanager"   , NBT_DESIGNS, 2), "SCS", "YMY", "XwX", 'C', CS.OD_CIRCUITS[2], 'S', OP.pipeSmall.dat(aMat),'Y', IL.CONVEYERS[2], 'X', OP.wireGt02.dat(MT.Cu), 'M', OP.casingMachine.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Mask Aligner IO Manager (UV+)"                  , "kTFRUAddon: Multiblock", 31021, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "iomanager"   , NBT_DESIGNS, 2), "SCS", "YMY", "XwX", 'C', CS.OD_CIRCUITS[3], 'S', OP.pipeSmall.dat(aMat),'Y', IL.CONVEYERS[3], 'X', OP.wireGt02.dat(MT.Ag), 'M', OP.casingMachine.dat(aMat));
        //aMat = ;     kRegistry0.add("Mask Aligner IO Manager (DUV)"     , "kTFRUAddon: Multiblock", 31022, 17200, MultiTileEntityMultiBlockPart.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "iomanager"   , NBT_DESIGNS, 2));
        //aMat = ;     kRegistry0.add("Mask Aligner IO Manager (EUV)"     , "kTFRUAddon: Multiblock", 31023, 17200, MultiTileEntityMultiBlockPart.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "iomanager"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Cooler Pump"                            , "kTFRUAddon: Multiblock", 31024, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Conductor (T1)"                , "kTFRUAddon: Multiblock", 31025, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Coil (T1)"                     , "kTFRUAddon: Multiblock", 31026, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Magnetic Wall (T1)"                     , "kTFRUAddon: Multiblock", 31027, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Tokamak Neutron Heator"                         , "kTFRUAddon: Multiblock", 31028, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2));
        aMat = MT.StainlessSteel;  kRegistry0.add("Stainless Steel Turbine Shell"                  , "kTFRUAddon: Multiblock", 31029, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2)); recipeMaps.CNCMachine.addRecipe2(F,200,8000,ST.tag(0),gRegistry.getItem(18002),FL.array(FL.DistW.make(2000)),ZL_FS,kRegistry0.getItem());
        aMat = MT.Ti;              kRegistry0.add("Titanium Turbine Shell"                         , "kTFRUAddon: Multiblock", 31030, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2)); recipeMaps.CNCMachine.addRecipe2(F,200,8000,ST.tag(0),gRegistry.getItem(18006),FL.array(FL.DistW.make(2000)),ZL_FS,kRegistry0.getItem());
        aMat = MT.TungstenSteel;   kRegistry0.add("Tungsten Steel Turbine Shell"                   , "kTFRUAddon: Multiblock", 31031, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2)); recipeMaps.CNCMachine.addRecipe2(F,200,8000,ST.tag(0),gRegistry.getItem(18003),FL.array(FL.DistW.make(2000)),ZL_FS,kRegistry0.getItem());
        aMat = MT.Ad;              kRegistry0.add("Adamantium Turbine Shell"                       , "kTFRUAddon: Multiblock", 31032, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "wall"   , NBT_DESIGNS, 2)); recipeMaps.CNCMachine.addRecipe2(F,200,8000,ST.tag(0),gRegistry.getItem(18005),FL.array(FL.DistW.make(2000)),ZL_FS,kRegistry0.getItem());


        //special part
        aMat = MT.Al;              kRegistry0.add("Mask Aligner Energy Module (UV)"      , "kTFRUAddon: Multiblock", 31500, 17200, MultiBlockPartEnergyConsumer.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "energymodule",NBT_DESIGNS, 2   , NBT_INPUT, 218, NBT_INPUT_MIN,    176, NBT_INPUT_MAX,   256  , NBT_ENERGY_ACCEPTED, TD.Energy.EU), "ShS", "wT ", "XCX" ,'T',gRegistry.getItem(10042), 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt08.dat(MT.Cu), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));
        aMat = MT.StainlessSteel;  kRegistry0.add("Mask Aligner Energy Module (UV+)"     , "kTFRUAddon: Multiblock", 31501, 17200, MultiBlockPartEnergyConsumer.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "energymodule",NBT_DESIGNS, 2   , NBT_INPUT, 448, NBT_INPUT_MIN,    480, NBT_INPUT_MAX,   512  , NBT_ENERGY_ACCEPTED, TD.Energy.EU), "ShS", "wT ", "XCX" ,'T',gRegistry.getItem(10043), 'S', OP.stickLong.dat(aMat), 'X', OP.wireGt08.dat(MT.Ag), 'C', CS.OD_CIRCUITS[2], 'M', OP.casingMachine.dat(aMat));


        //aMat = ;     kRegistry0.add("Mask Aligner Energy Module (DUV)"     , "kTFRUAddon: Multiblock", 31502, 17200, MultiTileEntityMultiBlockPartEnergyConsumer.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "energymodule",NBT_DESIGNS, 2   , NBT_INPUT, 3072, NBT_INPUT_MIN,    2048, NBT_INPUT_MAX,   4096  , NBT_ENERGY_ACCEPTED, TD.Energy.EU));

        //aMat = ;     kRegistry0.add("Mask Aligner Energy Module (EUV)"     , "kTFRUAddon: Multiblock", 31503, 17200, MultiTileEntityMultiBlockPartEnergyConsumer.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "energymodule",NBT_DESIGNS, 2  ));

        aClass=MultiBlockPartComputeCluster.class;
        aMat = MT.Cr;  kRegistry0.add("Compute Cluster"     , "kTFRUAddon: Multiblock", 32005, 17200, aClass , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "computercluster"   , NBT_DESIGNS, 7));

        aMat = MT.StainlessSteel;              kRegistry0.add("Compute Cluster Simple"     , "kTFRUAddon: Multiblock", 32006, 17200, MultiBlockPartComputeClusterSimple.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "computerclustersimple"   , NBT_DESIGNS, 7));
        aMat = MT.StainlessSteel;              kRegistry0.add("Dyson Sphere Monitor"     , "kTFRUAddon: Multiblock", 32750, 17200, dysonSphereMonitor.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "computercluster", NBT_INPUT, 3072, NBT_INPUT_MIN,    2048, NBT_INPUT_MAX,   4096  ,NBT_RECIPEMAP, recipeMaps.Code , NBT_ENERGY_ACCEPTED, TD.Energy.EU));
        aMat = MT.StainlessSteel;              kRegistry0.add("Code Util Machine"     , "kTFRUAddon: Multiblock", 32760, 17200, MachineCodeUtil.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F, NBT_TEXTURE, "computercluster", NBT_INPUT, 3072, NBT_INPUT_MIN,    2048, NBT_INPUT_MAX,   4096  ,NBT_RECIPEMAP, recipeMaps.Code , NBT_ENERGY_ACCEPTED, TD.Energy.EU));
        aMat = MT.Bronze;              kRegistry0.add("Rust Bronze Machine Casing"     , "kTFRUAddon: Casing", 32761, 1230, rustBronzeCasing.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F));
        aMat = MT.Bronze;              kRegistry0.add("DeRust Bronze Machine Casing"     , "kTFRUAddon: Casing", 32762, 1230, MultiTileEntityMultiBlockPart.class , aMat.mToolQuality, 16, aMachine   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_HARDNESS,   6.0F, NBT_RESISTANCE,   6.0F,NBT_TEXTURE, "wall"));RM.Welder.addRecipe2(F,16,200,kRegistry0.getItem(32762,1),OP.plate.mat(MT.Bronze,1),ZL_FS,ZL_FS,OP.casingMachine.mat(MT.Bronze,1));
        aMat = MT.RedSteel;              kRegistry0.add("Red Steel Crucible Model"     , "kTFRUAddon: Machines", 32763, 20001, CrucibleModel.class , aMat.mToolQuality, 16, tMetalBlock   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_HARDNESS,   2.0F, NBT_RESISTANCE,   2.0F),"   "," M ","hPf",'P',OP.plate.mat(MT.RedSteel,1), 'M', ItemList.CrucibleModelInnerLayer.get(1));
        aMat = MT.BlueSteel;              kRegistry0.add("Blue Steel Crucible Model"     , "kTFRUAddon: Machines", 32764, 20001, CrucibleModel.class , aMat.mToolQuality, 16, tMetalBlock   , UT.NBT.make(NBT_MATERIAL, aMat, NBT_COLOR, UT.Code.getRGBInt(aMat.fRGBaSolid),NBT_HARDNESS,   2.0F, NBT_RESISTANCE,  2.0F),"   "," M ","hPf",'P',OP.plate.mat(MT.BlueSteel,1), 'M', ItemList.CrucibleModelInnerLayer.get(1));


    }
}